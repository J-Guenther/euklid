export declare class Vector2 {
    x: number;
    y: number;
    constructor(vector: Vector2);
    constructor(arrayXY: []);
    constructor(x: number, y: number);
    add(other: Vector2): Vector2;
    addToSelf(other: Vector2): void;
    addScalar(scalar: number): Vector2;
    addScalarToSelf(scalar: number): void;
    subtract(other: Vector2): Vector2;
    subtractFromSelf(other: Vector2): void;
    subtractScalar(scalar: number): Vector2;
    subtractScalarFromSelf(scalar: number): void;
    multiply(other: Vector2): Vector2;
    multiplySelf(other: Vector2): void;
    multiplyScalar(scalar: number): Vector2;
    multiplyScalarSelf(scalar: number): void;
    divide(other: Vector2): Vector2;
    divideSelf(other: Vector2): void;
    divideScalar(scalar: number): Vector2;
    divideScalarSelf(scalar: number): void;
    modulo(other: Vector2): Vector2;
    moduloSelf(other: Vector2): void;
    equals(other: Vector2): boolean;
    notEquals(other: Vector2): boolean;
    angle(): number;
    angleTo(other: Vector2): number;
    angleToPoint(other: Vector2): number;
    length(): number;
    lengthSquared(): number;
    normalize(): void;
    normalized(): Vector2;
    distanceTo(other: Vector2): number;
    distanceSquaredTo(other: Vector2): number;
    dot(other: Vector2): number;
    cross(other: Vector2): number;
    rotate(by: number): Vector2;
    rotateSelf(by: number): void;
    project(to: Vector2): Vector2;
    clamp(min: Vector2, max: Vector2): Vector2;
    limitLength(length: number): Vector2;
    moveToward(to: Vector2, delta: number): Vector2;
    slide(normalized: Vector2): Vector2;
    toString(): string;
    toArray(): [x: number, y: number];
    copy(): Vector2;
}
